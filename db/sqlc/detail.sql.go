// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: detail.sql

package db

import (
	"context"
)

const createDetail = `-- name: CreateDetail :one
INSERT INTO details (
  trader_id,
  number
) VALUES (
  $1, $2
) RETURNING id, trader_id, number, created_time
`

type CreateDetailParams struct {
	TraderID int64 `json:"trader_id"`
	Number   int64 `json:"number"`
}

func (q *Queries) CreateDetail(ctx context.Context, arg CreateDetailParams) (Detail, error) {
	row := q.db.QueryRow(ctx, createDetail, arg.TraderID, arg.Number)
	var i Detail
	err := row.Scan(
		&i.ID,
		&i.TraderID,
		&i.Number,
		&i.CreatedTime,
	)
	return i, err
}

const getDetail = `-- name: GetDetail :one
SELECT id, trader_id, number, created_time FROM details
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDetail(ctx context.Context, id int64) (Detail, error) {
	row := q.db.QueryRow(ctx, getDetail, id)
	var i Detail
	err := row.Scan(
		&i.ID,
		&i.TraderID,
		&i.Number,
		&i.CreatedTime,
	)
	return i, err
}

const listDetails = `-- name: ListDetails :many
SELECT id, trader_id, number, created_time FROM details
WHERE trader_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListDetailsParams struct {
	TraderID int64 `json:"trader_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListDetails(ctx context.Context, arg ListDetailsParams) ([]Detail, error) {
	rows, err := q.db.Query(ctx, listDetails, arg.TraderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Detail{}
	for rows.Next() {
		var i Detail
		if err := rows.Scan(
			&i.ID,
			&i.TraderID,
			&i.Number,
			&i.CreatedTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
