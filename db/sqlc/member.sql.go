// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: member.sql

package db

import (
	"context"
)

const createMember = `-- name: CreateMember :one
INSERT INTO members (
  membername,
  password_hash,
  name_entire,
  email
) VALUES (
  $1, $2, $3, $4
) RETURNING membername, password_hash, name_entire, email, password_changed_time, created_time
`

type CreateMemberParams struct {
	Membername   string `json:"membername"`
	PasswordHash string `json:"password_hash"`
	NameEntire   string `json:"name_entire"`
	Email        string `json:"email"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember,
		arg.Membername,
		arg.PasswordHash,
		arg.NameEntire,
		arg.Email,
	)
	var i Member
	err := row.Scan(
		&i.Membername,
		&i.PasswordHash,
		&i.NameEntire,
		&i.Email,
		&i.PasswordChangedTime,
		&i.CreatedTime,
	)
	return i, err
}

const getMember = `-- name: GetMember :one
SELECT membername, password_hash, name_entire, email, password_changed_time, created_time FROM members
WHERE membername = $1 LIMIT 1
`

func (q *Queries) GetMember(ctx context.Context, membername string) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMember, membername)
	var i Member
	err := row.Scan(
		&i.Membername,
		&i.PasswordHash,
		&i.NameEntire,
		&i.Email,
		&i.PasswordChangedTime,
		&i.CreatedTime,
	)
	return i, err
}
