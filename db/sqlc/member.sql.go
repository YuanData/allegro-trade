// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: member.sql

package db

import (
	"context"
	"database/sql"
)

const createMember = `-- name: CreateMember :one
INSERT INTO members (
  membername,
  password_hash,
  name_entire,
  email
) VALUES (
  $1, $2, $3, $4
) RETURNING membername, password_hash, name_entire, email, password_changed_time, created_time, is_email_verified
`

type CreateMemberParams struct {
	Membername   string `json:"membername"`
	PasswordHash string `json:"password_hash"`
	NameEntire   string `json:"name_entire"`
	Email        string `json:"email"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember,
		arg.Membername,
		arg.PasswordHash,
		arg.NameEntire,
		arg.Email,
	)
	var i Member
	err := row.Scan(
		&i.Membername,
		&i.PasswordHash,
		&i.NameEntire,
		&i.Email,
		&i.PasswordChangedTime,
		&i.CreatedTime,
		&i.IsEmailVerified,
	)
	return i, err
}

const getMember = `-- name: GetMember :one
SELECT membername, password_hash, name_entire, email, password_changed_time, created_time, is_email_verified FROM members
WHERE membername = $1 LIMIT 1
`

func (q *Queries) GetMember(ctx context.Context, membername string) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMember, membername)
	var i Member
	err := row.Scan(
		&i.Membername,
		&i.PasswordHash,
		&i.NameEntire,
		&i.Email,
		&i.PasswordChangedTime,
		&i.CreatedTime,
		&i.IsEmailVerified,
	)
	return i, err
}

const updateMember = `-- name: UpdateMember :one
UPDATE members
SET
  password_hash = COALESCE($1, password_hash),
  password_changed_time = COALESCE($2, password_changed_time),
  name_entire = COALESCE($3, name_entire),
  email = COALESCE($4, email),
  is_email_verified = COALESCE($5, is_email_verified)
WHERE
  membername = $6
RETURNING membername, password_hash, name_entire, email, password_changed_time, created_time, is_email_verified
`

type UpdateMemberParams struct {
	PasswordHash        sql.NullString `json:"password_hash"`
	PasswordChangedTime sql.NullTime   `json:"password_changed_time"`
	NameEntire          sql.NullString `json:"name_entire"`
	Email               sql.NullString `json:"email"`
	IsEmailVerified     sql.NullBool   `json:"is_email_verified"`
	Membername          string         `json:"membername"`
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, updateMember,
		arg.PasswordHash,
		arg.PasswordChangedTime,
		arg.NameEntire,
		arg.Email,
		arg.IsEmailVerified,
		arg.Membername,
	)
	var i Member
	err := row.Scan(
		&i.Membername,
		&i.PasswordHash,
		&i.NameEntire,
		&i.Email,
		&i.PasswordChangedTime,
		&i.CreatedTime,
		&i.IsEmailVerified,
	)
	return i, err
}
