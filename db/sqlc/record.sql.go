// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: record.sql

package db

import (
	"context"
)

const createRecord = `-- name: CreateRecord :one
INSERT INTO records (
  from_trader_id,
  to_trader_id,
  number
) VALUES (
  $1, $2, $3
) RETURNING id, from_trader_id, to_trader_id, number, created_time
`

type CreateRecordParams struct {
	FromTraderID int64 `json:"from_trader_id"`
	ToTraderID   int64 `json:"to_trader_id"`
	Number       int64 `json:"number"`
}

func (q *Queries) CreateRecord(ctx context.Context, arg CreateRecordParams) (Record, error) {
	row := q.db.QueryRowContext(ctx, createRecord, arg.FromTraderID, arg.ToTraderID, arg.Number)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.FromTraderID,
		&i.ToTraderID,
		&i.Number,
		&i.CreatedTime,
	)
	return i, err
}

const getRecord = `-- name: GetRecord :one
SELECT id, from_trader_id, to_trader_id, number, created_time FROM records
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRecord(ctx context.Context, id int64) (Record, error) {
	row := q.db.QueryRowContext(ctx, getRecord, id)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.FromTraderID,
		&i.ToTraderID,
		&i.Number,
		&i.CreatedTime,
	)
	return i, err
}

const listRecords = `-- name: ListRecords :many
SELECT id, from_trader_id, to_trader_id, number, created_time FROM records
WHERE 
    from_trader_id = $1 OR
    to_trader_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListRecordsParams struct {
	FromTraderID int64 `json:"from_trader_id"`
	ToTraderID   int64 `json:"to_trader_id"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

func (q *Queries) ListRecords(ctx context.Context, arg ListRecordsParams) ([]Record, error) {
	rows, err := q.db.QueryContext(ctx, listRecords,
		arg.FromTraderID,
		arg.ToTraderID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Record{}
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.FromTraderID,
			&i.ToTraderID,
			&i.Number,
			&i.CreatedTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
